-- do not pollute the global environment
local t = {}
package.seeall(t)
setfenv(0, t)

-- short-cuts
local C = context
local format = string.format

-- main table
local cats = dofile"categories.lua"

-- Call back for cid-files.
-- todo
function general_settings(...)
end

-- Call back for cid-files.
-- todo
function general_keywords(...)
end

-- Format the command name.
-- Add backslach, add start-stop and so on
-- c: command table
-- return: tex-string for nice looking command name
local function format_cmd_name(c)
    local s = "\\textbackslash " .. c.name
    if c.environment then
        s = s .. " ... \\textbackslash "
        local stop = "ERROR"
        if c.name:find("^b") then
            stop = c.name:gsub("^(b)", "e")
        elseif c.name:find("^start") then
            stop = c.name:gsub("^(start)", "stop")
        end
        s = s .. stop
    end
    return format("\\mono{%s}", s)
end

-- Print a section with a command description.
-- c: the command table
local function print_command(c)
    local date = c.vc_id:match("^%$Id: .- (%d%d%d%d%-%d%d%-%d%d) .-%$$")
    C.startsection{title = format_cmd_name(c), reference = c.name}
    C.inmargin(format("Last update: %s, Status: %s", date, c.status))
    C(c.comment)
    C.stopsection()
end

-- Print related commands.
-- r: table with related commands
local function print_related_commands(r)
    if #r > 0 then
        C.startsection{title = "Related commands"}
        C.startRelatedCommands()
        for _, c in ipairs(r) do
            C.RelatedCommand{name = format_cmd_name(c),
                             comment = c.comment, reference = c.name}
        end
        C.stopRelatedCommands()
        C.stopsection()
    end
end

-- Print a category with it's commands.
-- cat: category table
local function print_category(cat)
    C.startchapter{title = cat.title}
    for _, c in ipairs(cat.commands) do
        print_command(c)
    end
    print_related_commands(cat.related)
    C.stopchapter()
end

-- Extend the category table with references by labels.
-- And add commands and related tables to each entry.
local function prepare_cats_table()
    for i, c in ipairs(cats) do
        c.commands, c.related = {}, {}
        cats[c.label] = c
    end
end

-- Read the cid files and put the content into the category table.
local function read_cid_files()
    local d = "commands"
	for f in lfs.dir(d) do
        local b = f:match("^(.*)%.cid$")
        if b then
            local cid = dofile(d .. "/" .. f)
            for i, c in ipairs(cid.categories) do
                table.insert(cats[c][i == 1 and "commands" or "related"], cid)
            end
        end
    end
    for _, c in ipairs(cats) do
        local function sort_by_name(a, b) return a.name < b.name end
        table.sort(c.commands, sort_by_name)
        table.sort(c.related, sort_by_name)
    end
end

-- do the real job
prepare_cats_table()
read_cid_files()
C("\\environment e-ctx-ref ")
C.starttext()
-- C.titlepage()
for _, c in ipairs(cats) do
    print_category(c)
end
-- print_index()
C.stoptext()
