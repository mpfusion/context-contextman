-- short-cuts
local C = tex.modes.html and dofile"ctxref-html.lua" or context
local format = string.format

-- main table
local cats = dofile"categories.lua"

-- general definitions
local defs = dofile"definitions.cid"

-- Print a warning on stdout and log-file if condition is true.
-- c: condition
-- n: some name (for example command name)
-- s: string to print
-- return: the condition
local function warn(c, n, s)
    if c then
        texio.write_nl("term and log", format("Error [%s]: %s", n, s))
    end
    return c
end

-- Format the command name.
-- Add backslach, add start-stop and so on
-- c: command table
-- o: options string
-- return: tex-string for nice looking command name
local function format_cmd_name(c, o)
    local s = "\\textbackslash " .. c.name
    if o then
        s = s .. o
    end
    if c.environment then
        s = s .. " ... \\textbackslash "
        local stop = "ERROR"
        if c.name:find("^b") then
            stop = c.name:gsub("^(b)", "e")
        elseif c.name:find("^start") then
            stop = c.name:gsub("^(start)", "stop")
        end
        s = s .. stop
    end
    return format("\\mono{%s}", s)
end

-- Build a nice string for presentation of an argument.
-- a: argument table
-- return: nice TeX-string
local function build_arg_string(a)
    local s = {keywords = {left = "[", right = "]"},
               settings = {left = "[", right = "]"},
               text = {left = "\\{", right = "\\}"}}
    local t = s[a.type] or {left = "[", right = "]"}
    if a.square_brackets then
        t.left, t.right = "[", "]"
    elseif a.braces then
        t.left, t.right = "\\{", "\\}"
    end
    return format("\\Arg[%d]{%s%s%s}", a.number, t.left, a.name, t.right)
end

-- Print one variant of the command.
-- c: command table
-- v: variant table
local function print_variant(c, v)
    local s = ""
    for i, a in ipairs(v) do
        s = s .. build_arg_string(c.arguments[a])
    end
    C.Variant(format_cmd_name(c, s), v.comment or "missing comment",
              v.description or "")
end

-- Texify the string.
-- s: normal text input string
-- return same string with some enhancements for TeX
-- todo: can be certainly done better and cleaner
local function texify(s)
    s = s:gsub("(%d)%%", "%1\\,\\%%")
    return s
end

-- Print the settings of an argument.
-- t: argument table
local function print_settings(t)
    if t.type ~= "settings" then
        return
    end
    if t.settings then
        C.StartSettings()
        for _, s in ipairs(t.settings) do
            if s.resolve then
                setmetatable(s, {__index = defs.settings[s.resolve]})
            end
            C.Setting(s.name, table.concat(s.values, " "),
                      texify(s.comment or ""), texify(s.description or ""))
        end
        C.StopSettings()
    end
    if t.inherit then
        C.Inherit(t.inherit)
    end
end

-- Print the keywords of an argument.
-- t: argument table
local function print_keywords(t)
    if t.resolve then
        print(t.resolve)
        setmetatable(t, {__index = defs.keywords[t.resolve]})
    end
    C("%s %s", t.comment or "", t.description or "")
    C.par()
    if t.keywords then
        C.StartKeywords()
        for _, k in ipairs(t.keywords) do
            C.Keyword(k.name, texify(k.comment))
        end
        C.StopKeywords()
    end
    if t.inherit then
        C.Inherit(t.inherit)
    end
end

-- Print the syntax description of the command.
-- c: command table
local function print_syntax(c)
    for i, v in ipairs(c.variants) do
        print_variant(c, v)
    end
    C.blank()
    for _, t in ipairs(c.arguments) do
        C.mono(build_arg_string(t) .. ": ")
        if t.type == "keywords" then
            print_keywords(t)
        else
            C("%s %s", t.comment or "", t.description or "")
            C.par()
            print_settings(t)
        end
        C.blank{"small"}
    end
end

-- Print a section with a command description.
-- c: the command table
local function print_command(c)
    local date, author =
        c.vc_id:match("^%$Id: .- (%d%d%d%d%-%d%d%-%d%d) .- (%w+) %$$")
    if warn(not date, c.name, "wrong version control id") then
        date, author = "???", "???"
    end
    C.startsection{title = format_cmd_name(c), reference = c.name}
    C(c.comment)
    C" "
    C(c.description)
    C.par()
    print_syntax(c)
    if c.status == "draft" then
        C.par()
        C("{\\txx This command description is work in progress and has " ..
          "not been approuved yet (last update: %s, last author: %s).}",
          date, author)
    end
    C.stopsection()
end

-- Print related commands.
-- r: table with related commands
local function print_related_commands(r)
    if #r > 0 then
        C.startsection{title = "Related commands"}
        C.startRelatedCommands()
        for _, c in ipairs(r) do
            C.RelatedCommand{name = format_cmd_name(c),
                             comment = c.comment, reference = c.name}
        end
        C.stopRelatedCommands()
        C.stopsection()
    end
end

-- Print a category with it's commands.
-- cat: category table
local function print_category(cat)
    C.startchapter{title = cat.title}
    for _, c in ipairs(cat.commands) do
        print_command(c)
    end
    print_related_commands(cat.related)
    C.stopchapter()
end

-- Extend the category table with references by labels.
-- And add commands and related tables to each entry.
local function prepare_cats_table()
    for i, c in ipairs(cats) do
        c.commands, c.related = {}, {}
        cats[c.label] = c
    end
end

-- Extend the command table with references by labels.
local function prepare_cid_table(cid)
    for i, a in ipairs(cid.arguments) do
        a.number = i
        cid.arguments[a.name] = a
    end
end

-- Read the cid files and put the content into the category table.
local function read_cid_files()
    local d = "commands"
	for f in lfs.dir(d) do
        local b = f:match("^(.*)%.cid$")
        if b then
            local cid = dofile(d .. "/" .. f)
            warn(cid.name ~= file.removesuffix(f), f,
                 "command name does not match filename")
            prepare_cid_table(cid)
            for i, c in ipairs(cid.categories) do
                warn(not cats[c], c, "category does not exist")
                table.insert(cats[c][i == 1 and "commands" or "related"], cid)
            end
        end
    end
    for _, c in ipairs(cats) do
        local function sort_by_name(a, b) return a.name < b.name end
        table.sort(c.commands, sort_by_name)
        table.sort(c.related, sort_by_name)
    end
end

-- do the real job
prepare_cats_table()
read_cid_files()
C.environment{"e-ctx-ref"}
C.starttext()
-- C.titlepage()
for _, c in ipairs(cats) do
    print_category(c)
end
-- print_index()
C.stoptext()
